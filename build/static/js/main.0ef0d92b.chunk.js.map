{"version":3,"sources":["components/FoodItem/FoodItem.js","data/JunkFood.js","AppWrap.js","App.js","serviceWorker.js","index.js"],"names":["FoodItem","_this$props","this","props","name","imgUrl","description","calorie","sugar","handleFoodClick","selectedFood","react_default","a","createElement","className","onClick","id","src","alt","Component","JunkFood","AppWrap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","food","inputText","searchResult","bind","assertThisInitialized","handleInputChange","updateInputBox","toggleSuggestBox","setState","i","e","filter","item","includes","target","value","inputBox","document","getElementById","box","classList","contains","remove","add","_this2","_this$state","Items","type","placeholder","onChange","length","map","result","key","FoodItem_FoodItem_FoodItem","App","AppWrap_AppWrap","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ef0d92b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./FoodItem.css\";\n\nexport default class FoodItem extends Component {\n\n    render() {\n        const { name, imgUrl, description, calorie, sugar, handleFoodClick, selectedFood } = this.props;\n        return (\n            <div className=\"foodItem\" onClick={() => handleFoodClick(name)}>\n                <div id=\"imgUrl\"><img src={imgUrl} alt=\"pic\"/></div>\n                <div id=\"name\">{name}</div>\n                {selectedFood === name && <div id=\"calorie\">Calorie: {calorie}</div>}\n                {selectedFood === name && <div id=\"sugar\">Sugar: {sugar}</div>}\n                {selectedFood===name && <div id=\"desc\">Description: {description}</div>}\n            </div>\n        )\n    }\n}\n","export const JunkFood = [\n    {\n        \"id\": \"001\",\n        \"name\": \"Burger\",\n        \"imgUrl\": \"../asset/img-hamburger.jpg\",\n        \"description\": \"\",\n        \"calorie\": 1200,\n        \"sugar\": 200\n    },\n    {\n        \"id\": \"002\",\n        \"name\": \"French Fries\",\n        \"imgUrl\": \"../asset/img-french-fries.jpg\",\n        \"description\": \"\",\n        \"calorie\": 800,\n        \"sugar\": 100\n    },\n    {\n        \"id\": \"003\",\n        \"name\": \"Chicken Nugget\",\n        \"imgUrl\": \"../asset/img-chicken-nuggets.jpg\",\n        \"description\": \"\",\n        \"calorie\": 1000,\n        \"sugar\": 80\n    },\n    {\n        \"id\": \"004\",\n        \"name\": \"Coke Cola\",\n        \"imgUrl\": \"../asset/img-coke-cola.jpg\",\n        \"description\": \"\",\n        \"calorie\": 1300,\n        \"sugar\": 2100\n    },\n    {\n        \"id\": \"005\",\n        \"name\": \"Pepsi\",\n        \"imgUrl\": \"../asset/img-pepsi.jpg\",\n        \"description\": \"\",\n        \"calorie\": 1200,\n        \"sugar\": 1800\n    }\n]\n\n// export default JunkFood;","import React, { Component } from 'react';\nimport './AppWrap.css';\nimport FoodItem from './components/FoodItem/FoodItem';\nimport { JunkFood } from './data/JunkFood';\n\nexport default class AppWrap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            food: [],\n            selectedFood: null,\n            inputText: \"\",\n            searchResult: []\n        }\n        this.handleFoodClick = this.handleFoodClick.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.updateInputBox = this.updateInputBox.bind(this);\n        this.toggleSuggestBox = this.toggleSuggestBox.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            food: JunkFood,\n            searchResult: []\n        });\n    }\n\n    handleFoodClick(i) {\n        this.setState({\n            selectedFood: i\n        });\n    }\n\n    handleInputChange(e) {\n        const searchResult = this.state.food.filter(item => item.name.includes(e.target.value));\n        this.setState({\n            inputText: e.target.value,\n            searchResult: e.target.value === \"\" ? [] : searchResult\n        });\n    }\n\n    updateInputBox(item) {\n        const inputBox = document.getElementById(\"inputBox\");\n        inputBox.value = item;\n        const searchResult = this.state.food.filter(item => item.name.includes(inputBox.value));\n        this.setState({\n            inputText: inputBox.value,\n            searchResult: searchResult\n        });\n        this.toggleSuggestBox();\n    }\n\n    toggleSuggestBox() {\n        const box = document.getElementById(\"suggestBox\");\n        if (box.classList.contains(\"off\")) {\n            box.classList.remove(\"off\");\n        } else {\n            box.classList.add(\"off\");\n        }\n    }\n\n    render() {\n        const { food, inputText, searchResult } = this.state;\n        const Items = inputText === \"\" ? food : searchResult;\n        return (\n        <div className=\"appWrap\">\n            <div className=\"searchBar\">\n                <span>Search by name: </span>\n                <div className=\"inputBoxWrap\">\n                    <input className=\"inputBox\" id=\"inputBox\" type=\"text\" placeholder=\"Type 'c', 'i', 'e', etc.\" onChange={this.handleInputChange} />\n                    {searchResult.length !== 0 && \n                        <div className=\"suggestBox\" id=\"suggestBox\">\n                            {searchResult.map(result => (\n                                <div className=\"suggestItem\" \n                                    key={result.id} \n                                    onClick={() => { this.updateInputBox(result.name)}}\n                                    >\n                                {result.name}\n                                </div>\n                            ))}\n                        </div>}\n                </div>\n            </div>\n            {Items && Items.map(item => <FoodItem \n                key={item.id} \n                name={item.name} \n                imgUrl={item.imgUrl}\n                description={item.description}\n                calorie={item.calorie}\n                sugar={item.sugar}\n                handleFoodClick={this.handleFoodClick}\n                selectedFood={this.state.selectedFood}\n                />)}\n        </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport AppWrap from './AppWrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppWrap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}